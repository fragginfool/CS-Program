syntaxError: python can't parse the program
NameError: local or global name not found
AttributeError: attribute referene fails
TypeError: operand doesn't have correct type
ValueError: operand type okay but the value is illegal
IOError: IO system reports malfunction (file not found)

algorithmic complexity: no problem set....learned about O notation...didn't care to fully understand it but I grasped the main points. It's a way to describe the function in terms of its input...to know how it will respond as the input grows in size. Very useful. More than I care to know though. It's just good to know that as complexity grows...how will the parts handle it.


Design Recipe for Modules:
Signature, purpose, stub
Examples(wrapped in check-expect)
Inventory - template and constraints




EXAMPLE:
Problem: Design a function that consumes a number and produces twice that number. Call your function double. follow the htdf recipe and show the stub and template

# number -> number 			(Signature)
# produce 2 times the given number 	(Purpose)
# check-expect (double 3) 6		(Example)
# def double(n):	0 # these two lines are the stub or start of our function.



ToDo: learn about unittest for python...it looks like the code these guys are using does it internally. 

Week 3 - Learning goals:
Be able to explain the inherent structure of interactive graphical programs.
Be able to use the How to Design Worlds (HtDW) recipe to design interactive programs with atomic world state.
Be able to read and write big-bang expressions.

HtDW:
- identify constants
- identify changing variables
- Behavior our program has and what variables are needed to support it

TEMPLATE:

(require 2htdp/image)
(require 2htdp/universe)

;; My world program  (make this more specific)

;; =================
;; Constants:


;; =================
;; Data definitions:

;; WS is ... (give WS a better name)



;; =================
;; Functions:

;; WS -> WS
;; start the world with ...
;; 
(define (main ws)
  (big-bang ws                   ; WS
            (on-tick   tock)     ; WS -> WS
            (to-draw   render)   ; WS -> Image
            (stop-when ...)      ; WS -> Boolean
            (on-mouse  ...)      ; WS Integer Integer MouseEvent -> WS
            (on-key    ...)))    ; WS KeyEvent -> WS

;; WS -> WS
;; produce the next ...
;; !!!
(define (tock ws) ...)


;; WS -> Image
;; render ... 
;; !!!
(define (render ws) ...)

#required files or modules:
import file1
import file2

"""
My world program (make this more specific)
"""

#Constants:
#Data Definitions: changing variables
#Functions: (Here we define what makes our program function in atomic data)


